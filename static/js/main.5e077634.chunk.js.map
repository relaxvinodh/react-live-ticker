{"version":3,"sources":["components/Header/index.tsx","context/index.ts","components/Chart/index.tsx","components/Table/TableBody.tsx","components/Table/TableField.tsx","components/Table/TableHeader.tsx","components/Table/TableLabel.tsx","components/Table/TableRow.tsx","components/Table/index.tsx","components/reducer/actions.ts","components/reducer/utils.ts","components/reducer/index.ts","useWebSocket.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","BooksContext","createContext","Rect","React","memo","value","totalMax","otherProps","width","useMemo","Math","abs","Chart","type","useContext","totals","sortedItems","R","map","idx","total","x","y","height","fillOpacity","TableBody","children","TableField","style","ratio","TableHeader","TableLabel","TableRow","Row","item","count","amount","price","TableItem","data","Tables","ACTIONS","INITIAL","UPDATE_ASKS","DELETE_ASKS","UPDATE_BIDS","DELETE_BIDS","mapRec","getValues","getItemTotalMax","max","accumalateTotal","priceSnapshot","reduce","hash","curr","srcArray","undefined","previousTotal","parseFloat","toFixed","initialState","asks","priceSnap","bids","dataReducer","state","payload","stateWithData","side","push","getData","asksTotals","bidsTotals","id","updatedData","String","updatedPriceSnap","a","b","updatedTotals","updatedMax","useWebSocket","booksStore","localStorage","getItem","useReducer","JSON","parse","dispatch","saveStore","useCallback","setItem","stringify","useEffect","ws","WebSocket","i","onopen","send","event","channel","symbol","onmessage","msg","Array","isArray","setTimeout","window","addEventListener","removeEventListener","close","e","console","error","App","Provider","Table","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e077634.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\nconst Header: React.FC = () => (\n  <div className=\"header\">\n    Order Book\n    {' '}\n    <span className=\"subText\"> BTC/USD</span>\n  </div>\n);\n\nexport default Header;\n","import { createContext } from 'react';\nimport { StateType } from '../components/reducer/types';\n\nconst BooksContext = createContext<StateType | null>(null);\n\nexport default BooksContext;\n","import * as R from 'ramda';\nimport React, { useContext, useMemo } from 'react';\nimport BooksContext from '../../context';\nimport './chart.scss';\n\ntype ChartProps = {\n  type: 'asks' | 'bids',\n};\n\n/**\n * rect Component\n *\n * sets the width based on the value and totalMax passed\n *\n * @param value number\n * @param totalMax number\n *\n */\n\nconst Rect: React.FC<\nReact.SVGProps<SVGRectElement> & {\n  value: number, totalMax: number\n}> = React.memo(({ value, totalMax, ...otherProps }) => {\n  const width = useMemo(() => `${(Math.abs(value) * 100) / totalMax}%`, [value, totalMax]);\n  return <rect {...otherProps} width={width} />;\n});\n\nconst Chart: React.FC<ChartProps> = React.memo(({ type }) => {\n  const books = useContext(BooksContext);\n  const { totals, totalMax } = books![type];\n\n  const sortedItems = useMemo(() => {\n    if (type === 'bids') {\n      return R.sort(R.ascend(R.prop('total')), R.values(totals));\n    }\n    return R.values(totals);\n  }, [totals, type]);\n  return (\n    <div className=\"chart container\">\n      <svg className={type}>\n        {sortedItems?.map(({ total }, idx) => (\n          <Rect x=\"1\" y={17 * idx} height=\"17\" value={total} totalMax={totalMax} fillOpacity=\"1\" key={`${type}-${idx}`} />\n        ))}\n      </svg>\n    </div>\n  );\n});\n\nexport default Chart;\n","import React from 'react';\n\n/**\n * TableBody Component\n * Wrapper component when creating the body of the table\n *\n * @param children\n */\n\nconst TableBody:React.FC = ({ children }) => (\n  <div className=\"tableBody\">{children}</div>\n);\n\nexport default TableBody;\n","import React from 'react';\n\ntype TableFieldProps = {\n  ratio?: string,\n};\n\n/**\n * TableField Component\n * Each field in the row\n *\n * @param ratio Accepts a string, which is applied to the flex grow property\n * @param children\n */\n\nconst TableField:React.FC<TableFieldProps> = ({ children, ratio }) => {\n  const style = { '--ratio': ratio } as React.CSSProperties;\n  return (\n    <div className=\"tableField\" style={style}>{children}</div>\n  );\n};\n\nexport default TableField;\n","import React from 'react';\n\n/**\n * TableHeader Component\n * Wrapper component when creating the header\n *\n * @param children\n */\n\nconst TableHeader:React.FC = ({ children }) => (\n  <div className=\"tableHeader\">{children}</div>\n);\n\nexport default TableHeader;\n","import React from 'react';\n\n/**\n * TableLabel Component\n * To be used inside the TableField component\n * Should be used for only the table headers/title\n * As this will be hidden for the TableBody component\n *\n * @param children\n */\n\nconst TableLabel:React.FC = ({ children }) => (\n  <p className=\"tableLabel\">{children}</p>\n);\n\nexport default TableLabel;\n","import React from 'react';\n\n/**\n * TableRow Component\n * Should be used for every row\n *\n * @param children\n */\n\nconst TableRow:React.FC = ({ children }) => (\n  <div className=\"tableRow\">{children}</div>\n);\n\nexport default TableRow;\n","import * as R from 'ramda';\nimport React, { useContext, useMemo } from 'react';\nimport BooksContext from '../../context';\nimport Chart from '../Chart';\nimport './styles.scss';\nimport TableBody from './TableBody';\nimport TableField from './TableField';\nimport TableHeader from './TableHeader';\nimport TableLabel from './TableLabel';\nimport TableRow from './TableRow';\n\nexport const Row = React.memo(({ item, total }: {item?: any, total?: number}) => (\n  <TableRow>\n    <TableField>\n      <TableLabel>Count</TableLabel>\n      {item?.count}\n    </TableField>\n    <TableField>\n      <TableLabel>Amount</TableLabel>\n      {item?.amount && Math.abs(item.amount)}\n    </TableField>\n    <TableField>\n      <TableLabel>Total</TableLabel>\n      {total && Math.abs(total)}\n    </TableField>\n    <TableField>\n      <TableLabel>Price</TableLabel>\n      {item?.price}\n    </TableField>\n  </TableRow>\n));\n\nconst TableItem:React.FC<React.HTMLAttributes<HTMLDivElement> & { type: 'asks' | 'bids'}> = React.memo(\n  ({ type, ...otherProps }) => {\n    const books = useContext(BooksContext);\n    const { data, totals } = books![type];\n\n    const sortedItems = useMemo(() => {\n      if (type === 'bids') {\n        return R.sort(R.descend(R.prop('price')), R.values(data));\n      }\n      return R.values(data);\n    }, [data, type]);\n    return (\n      <div className={`table ${type ?? ''}`} {...otherProps}>\n        <TableHeader>\n          <Row />\n        </TableHeader>\n        <TableBody>\n          <Chart type={type} />\n          {sortedItems.map((item, idx) => (\n            <Row item={item} key={`${type}-${idx}`} total={totals[item.price]?.total} />\n          ))}\n        </TableBody>\n      </div>\n    );\n  },\n);\n\nconst Tables: React.FC = () => (\n  <div className=\"tableContainer\">\n    <TableItem type=\"bids\" />\n    <TableItem type=\"asks\" />\n  </div>\n);\nexport default Tables;\n","const ACTIONS = {\n  INITIAL: 'INITIAL',\n  UPDATE_ASKS: 'UPDATE_ASKS',\n  DELETE_ASKS: 'DELETE_ASKS',\n  UPDATE_BIDS: 'UPDATE_BIDS',\n  DELETE_BIDS: 'DELETE_BIDS',\n};\n\nexport default ACTIONS;\n","/* eslint-disable no-param-reassign */\nimport * as R from 'ramda';\nimport {\n  SideType, ItemTotal, StateType, ItemType,\n} from './types';\n\n/**\n * mapRec\n *\n * @param array array of three numbers\n *\n * @return {object} object of 'price', 'count', 'amount'\n * @example\n *          const data = [1, 2, 3];\n *          const formattedData = mapRec(data);\n *\n *\n */\n\nexport const mapRec = R.applySpec<{ price: number, count: number, amount: number }>({\n  price: R.view(R.lensIndex(0)),\n  count: R.view(R.lensIndex(1)),\n  amount: R.view(R.lensIndex(2)),\n});\n\nconst getValues:(obj: SideType['totals']) => ItemTotal[] = R.values;\n\nexport const getItemTotalMax = R.pipe(\n  getValues,\n  R.map<ItemTotal, number>(R.prop('total')),\n  R.apply(Math.max),\n);\n\n/**\n * accumalateTotal\n *\n * @param priceSnapShot array of numbers of the keys in sorted order\n * @param data data object indexed by the price\n *\n * @return total object indexed by the price\n * @example\n *          const priceSnap = [22221, 22222, 22223];\n *          const data = {\n *            22221: { 'price': 22221, 'count': 2, 'amount': 1}\n *            22222: { 'price': 22222, 'count': 3, 'amount': 1}\n *            22223: { 'price': 22223, 'count': 4, 'amount': 1}\n *          }\n *          accumalateTotal(priceSnap, data);\n */\n\nexport const accumalateTotal = (priceSnapshot: number[], data: SideType['data']) => priceSnapshot.reduce((hash, curr, idx, srcArray) => {\n  if (hash[curr] === undefined) {\n    hash[curr] = {} as ItemTotal;\n  }\n\n  const { amount } = data[curr];\n  const { total: previousTotal = 0 } = hash[srcArray[idx - 1]] || {};\n  hash[curr] = { amount, total: parseFloat((previousTotal + amount).toFixed(8)) };\n  return hash;\n}, {} as SideType['totals']);\n\n/**\n * getData\n *\n * @param payload Array<Array<number>>\n * @param state state value\n *\n * @return updated state value\n */\nexport const getData = <T extends Array<number>>(\n  payload: T[], state: StateType) => R.reduce(\n    (hash: StateType, curr: T) => {\n      const [price, , amount] = curr;\n      const side = amount >= 0 ? 'bids' : 'asks';\n\n      if (hash[side].data[price] === undefined) {\n        hash[side].data[price] = {} as ItemType;\n      }\n\n      hash[side].priceSnap.push(price);\n      hash[side].data[price] = mapRec(curr);\n\n      return hash;\n    }, state, payload,\n  );\n","import * as R from 'ramda';\nimport ACTIONS from './actions';\nimport {\n  IndexedItemType, ItemTotal, StateType, Totals,\n} from './types';\nimport {\n  accumalateTotal, getData, getItemTotalMax, mapRec,\n} from './utils';\n\nexport const initialState: StateType = {\n  asks: {\n    data: {}, priceSnap: [], totals: {} as ItemTotal, totalMax: 0,\n  },\n  bids: {\n    data: {}, priceSnap: [], totals: {} as ItemTotal, totalMax: 0,\n  },\n};\n\nconst dataReducer = <T extends Array<number>>(\n  state: StateType, [type, payload]: [string, T[] | T],\n) => {\n  const {\n    INITIAL, UPDATE_ASKS, DELETE_ASKS, UPDATE_BIDS, DELETE_BIDS,\n  } = ACTIONS;\n  switch (type) {\n    case INITIAL: {\n      const stateWithData = getData(payload as T[], state);\n      const asksTotals = accumalateTotal(state.asks.priceSnap, state.asks.data);\n      const bidsTotals = accumalateTotal(state.bids.priceSnap, state.bids.data);\n      const totalMax = Math.max(getItemTotalMax(asksTotals), getItemTotalMax(bidsTotals));\n      return R.pipe(\n        R.assocPath<Totals, StateType>(['asks', 'totals'], asksTotals),\n        R.assocPath(['asks', 'totalMax'], totalMax),\n        R.assocPath(['bids', 'totalMax'], totalMax),\n        R.assocPath(['bids', 'totals'], bidsTotals),\n      )(stateWithData);\n    }\n    case UPDATE_ASKS: {\n      const [id] = payload as T;\n      const updatedData = R.assoc(String(id), mapRec(payload), state.asks.data);\n      const updatedPriceSnap = R.ifElse(\n        R.includes(id),\n        R.identity,\n        R.pipe(\n          R.concat([id]),\n          R.sort((a, b) => a - b),\n        ),\n      )(state.asks.priceSnap);\n      const updatedTotals = accumalateTotal(updatedPriceSnap, updatedData);\n      const updatedMax = Math.max(getItemTotalMax(updatedTotals), state.bids.totalMax);\n\n      return R.pipe(\n        R.assocPath<IndexedItemType, StateType>(['asks', 'data'], updatedData),\n        R.assocPath(['asks', 'priceSnap'], updatedPriceSnap),\n        R.assocPath(['asks', 'totals'], updatedTotals),\n        R.assocPath(['asks', 'totalMax'], updatedMax),\n      )(state);\n    }\n    case DELETE_ASKS: {\n      const [id] = payload as T;\n      const updatedData = R.dissoc<IndexedItemType>(String(id), state.asks.data);\n      const updatedPriceSnap = R.without([id], state.asks.priceSnap);\n      const updatedTotals = accumalateTotal(updatedPriceSnap, updatedData);\n      const updatedMax = Math.max(getItemTotalMax(updatedTotals), state.bids.totalMax);\n\n      return R.pipe(\n        R.assocPath<IndexedItemType, StateType>(['asks', 'data'], updatedData),\n        R.assocPath(['asks', 'priceSnap'], updatedPriceSnap),\n        R.assocPath(['asks', 'totals'], updatedTotals),\n        R.assocPath(['asks', 'totalMax'], updatedMax),\n      )(state);\n    }\n    case UPDATE_BIDS: {\n      const [id] = payload as T;\n      const updatedData = R.assoc(String(id), mapRec(payload), state.bids.data);\n      const updatedPriceSnap = R.ifElse(\n        R.includes(id),\n        R.identity,\n        R.pipe(\n          R.concat([id]),\n          R.sort((a, b) => b - a),\n        ),\n      )(state.bids.priceSnap);\n      const updatedTotals = accumalateTotal(updatedPriceSnap, updatedData);\n      const updatedMax = Math.max(getItemTotalMax(updatedTotals), state.asks.totalMax);\n\n      return R.pipe(\n        R.assocPath<IndexedItemType, StateType>(['bids', 'data'], updatedData),\n        R.assocPath(['bids', 'priceSnap'], updatedPriceSnap),\n        R.assocPath(['bids', 'totals'], updatedTotals),\n        R.assocPath(['bids', 'totalMax'], updatedMax),\n      )(state);\n    }\n    case DELETE_BIDS: {\n      const [id] = payload as T;\n      const updatedData = R.dissoc<IndexedItemType>(String(id), state.bids.data);\n      const updatedPriceSnap = R.without([id], state.bids.priceSnap);\n      const updatedTotals = accumalateTotal(updatedPriceSnap, updatedData);\n      const updatedMax = Math.max(getItemTotalMax(updatedTotals), state.asks.totalMax);\n\n      return R.pipe(\n        R.assocPath<IndexedItemType, StateType>(['bids', 'data'], updatedData),\n        R.assocPath(['bids', 'priceSnap'], updatedPriceSnap),\n        R.assocPath(['bids', 'totals'], updatedTotals),\n        R.assocPath(['bids', 'totalMax'], updatedMax),\n      )(state);\n    }\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { useCallback, useEffect, useReducer } from 'react';\nimport './App.scss';\nimport dataReducer, { initialState } from './components/reducer';\nimport ACTIONS from './components/reducer/actions';\n\nconst useWebSocket = () => {\n  const booksStore = localStorage.getItem('booksStore');\n  const [state, dispatch] = useReducer(\n    dataReducer, booksStore ? JSON.parse(booksStore) : initialState,\n  );\n\n  const saveStore = useCallback(() => localStorage.setItem('booksStore', JSON.stringify(state)), [state]);\n\n  useEffect(() => {\n    const ws = new WebSocket('wss://api-pub.bitfinex.com/ws/2');\n    let i = 0;\n    ws.onopen = () => {\n      ws.send(JSON.stringify({\n        event: 'subscribe',\n        channel: 'book',\n        symbol: 'tBTCUSD',\n      }));\n    };\n    ws.onmessage = ({ data }) => {\n      const msg = JSON.parse(data);\n      if (msg.event) return;\n      if (msg[1] && msg[1][0] && Array.isArray(msg[1][0])) {\n        dispatch([ACTIONS.INITIAL, msg[1]]);\n      } else {\n        const [, count, amount] = msg[1];\n        i += 1;\n        if (count > 0) {\n          setTimeout(() => {\n            dispatch([amount > 0 ? ACTIONS.UPDATE_BIDS : ACTIONS.UPDATE_ASKS, msg[1]]);\n          }, i * 200);\n        } else {\n          setTimeout(() => {\n            dispatch([amount > 0 ? ACTIONS.DELETE_BIDS : ACTIONS.DELETE_ASKS, msg[1]]);\n          }, i * 100);\n        }\n      }\n    };\n\n    window.addEventListener('unload', saveStore, false);\n    return () => {\n      try {\n        window.removeEventListener('unload', saveStore, false);\n        ws.close();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e, 'error in closing websocket');\n      }\n    };\n  }, []);\n\n  return state;\n};\n\nexport default useWebSocket;\n","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Tables from './components/Table';\nimport BooksContext from './context';\nimport useWebSocket from './useWebSocket';\n\nconst App = () => {\n  const state = useWebSocket();\n  return (\n    <div className=\"App\">\n      <Header />\n      <BooksContext.Provider value={state}>\n        <Tables />\n      </BooksContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}